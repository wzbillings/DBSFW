{
  "hash": "6783cc74472257ea2f005f70ff2cd11e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 5: the Beta Distribution\"\nauthor: \"Zane Billings\"\ndate: \"2022-12-10\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(latex2exp)\noptions(\"scipen\" = 9999, \"digits\" = 16)\n```\n:::\n\n\n\n\n\n# Notes\n\nI actually took notes this time! I already know a pretty good amount about the\nbeta distribution, but I've never used it like this before.\n\n* **Motivation**: an event occurs with an unknown probability. How do we\nestimate the probability of occurrence? E.g. if you flip a coin 20 times and\nobserve 7 heads, what is the probability of getting heads?\n* Black box problem: you put in a quarter. Sometimes the quarter disappears and\nsometimes it gives you the quarter back. Sometimes it also gives you two\nquarters. Suppose we try 40 times and we get two quarters 14 times. Then, we\ncould suppose that\n\n\\begin{align*}\nH_1 &: P(\\text{two quarters}) = \\frac{1}{2} \\text{ and} \\\\\nH_2 &: P(\\text{two quarters}) = \\frac{14}{41}.\n\\end{align*}\n\nUsing a binomial likelihood to calculate the probability of each hypothesis,\nwe would get that\n\\begin{align*}\nP(D \\mid H_1) &= \\mathcal{B}\\left(14 \\mid 41, \\frac{1}{2}\\right) \\approx 0.016, \\\\\nP(D \\mid H_2) &= \\mathcal{B}\\left(14 \\mid 41, \\frac{14}{41}\\right) \\approx 0.130, \\text{ and therefore} \\\\\n\\frac{P(D \\mid H_2)}{P(D \\mid H_1)} &\\approx 8.125.\n\\end{align*}\nBut even though $H_2$ appears much more likely, neither is impossible!\n\n* We could also take a systematic sample of potential probabilities over the\nrange $(0, 1)$, since we have observed both outcomes -- these would be our\n\"hypotheses\". Plotting this likelihood curve over the possible values of $p$\nwould look like this.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- seq(0.01, 0.99, 0.01)\nplot(\n\tp, dbinom(14, 41, p), type = \"l\", lty = 2,\n\txlab = TeX('$\\\\hat{p}$'),\n\tylab = TeX('$P(D \\\\ | \\\\ \\\\hat{p})$')\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\n* These discrete values approximate a **beta distribution** (a fact that we\nwill not prove). The functional form of the Beta distribution is given by\n\n$$\\text{Beta}\\left( p; \\alpha, \\beta \\right) = \\frac{p^{\\alpha - 1}(1-p)^{\\beta - 1}}{\\mathrm{B}(\\alpha, \\beta)},$$\nwhere $\\mathrm{B}(a, b)$ is the beta function, defined as\n$$\\mathrm{B}(a, b) = \\int_0^1 t^{a-1}(1-t)^{b-1} \\ \\mathrm{d}t =\n\\frac{\\Gamma(a)\\Gamma(b)}{\\Gamma(a + b)}.$$\n\nThe beta function acts as a normalizing constant in this case.\n\nTo use this for getting the same curve, use:\n  + $p$: the probability of the event;\n  + $a$: how many times we observe a success;\n  + $b$: how many times we observe a failure.\n\n* What if we want to know the probability that the true chance of getting back\ntwo quarters from the black box is less than $\\frac{1}{2}$? (As a quick note,\nthe probability that it will be exactly $\\frac{1}{2}$ is zero. With\ncontinuous distributions, all single outcomes have zero probability, we can\nonly calculate the probability of ranges.) We can calculate:\n\n$$P\\left(p \\leq \\frac{1}{2}\\right) = \\int_{0}^{1/2} \\\n\\frac{p^{14-1}(1-p)^{27-1}}{\\mathrm{B}(14, 27)} \\\n\\mathrm{d}p.$$\n\nWe can get this in `R` via numerical integration (more details on this in\nthe first exercise).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(function(p) dbeta(p, 14, 27), 0, 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.9807613458578994 with absolute error < 0.0000059\n```\n\n\n:::\n:::\n\n\n\n\n\n* There is a 98\\% chance, given our evidence, that the probability of getting\ntwo coins back is less than one half.\n\n* Quick workthrough of the Gacha game example!\n\n  + $n = 1000$ trials\n  + $k = 5$ Bradley Efron cards\n  + We'll model this with a $\\mathrm{Beta}(5, 1195)$ distribution.\n  + Our friend will play the game if $P(p \\geq 0.005) > 70\\%$.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(function(x) dbeta(x, 5, 1195), 0.005, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.2850559397969717 with absolute error < 0.0001\n```\n\n\n:::\n:::\n\n\n\n\n\nSo the probability is only $29\\%$, so our friend will not play the game.\n\n# Solutions\n\n## Q1\n\n::: {.callout-note appearance=\"simple\"}\n\nYou want to use the beta distribution to determine whether or not a coin you\nhave is a fair coin — meaning that the coin gives you heads and tails equally.\nYou flip the coin 10 times and get 4 heads and 6 tails. Using the beta\ndistribution, what is the probability that the coin will land on heads more than\n60 percent of the time?\n\n:::\n\nThe probability we are interested in is\n$$P(p \\geq 0.6) = \\int_0^{0.6} \\mathrm{Beta}(p, 4, 6) \\ \\mathrm{d}p.$$\n\nWe could, of course, write out the distribution and integrate it:\n$$P(p \\geq 0.6) = \\int_0^{0.6}  \\frac{1}{\\mathrm{B} \\left(4, 6\\right)}p^{4-1}(1-p)^{6-1} \\ \\mathrm{d}p.$$\n\nHere, $\\mathrm{B}(a, b)$ is the beta function, not the binomial distribution.\nIn general, we could integrate\n$$\\int p^{a - 1}(1-p)^{b - 1} \\ \\mathrm{d}p $$\nfor real, known constants $k, a, b$, but the general integral in terms of $a$\nand $b$ is non-elementary, so it is impractical to do this symbolically. The\nsolution to this integral is called the \"regularized incomplete beta function\",\n$I_x(a, b).$ That means the solution to our original integral is\n$$ P(p \\geq 0.6) = I_{0.6}(4, 6) = \\frac{\\mathrm{B}_{0.6}(4, 6)}{\\mathrm{B}(4, 6)}, $$\nwhich we can't actually calculate in base `R` (there is no built-in function for\nthe incomplete beta function, although there could be a math identity that\nI don't know that lets us calculate it with the tools at our disposal).\nApparently this does not come up too often (for reasons we will see shortly),\nbut there are a few packages that offer the incomplete beta function.\nI found: `spsh`, `UCS`, and the one I'll load, `zipfR`. These all do other\nthings so it seems potentially worthwhile to me to implement a package that\nONLY includes the incomplete beta and gamma functions.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzipfR::Ibeta(0.6, 4, 6) / beta(4, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9006474239999999\n```\n\n\n:::\n:::\n\n\n\n\n\nNote that we could get the same thing by numerical integration.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(\n\tf = \\(p) (1 / beta(4, 6)) * p ^ 3 * (1 - p) ^ 5,\n\tlower = 0,\n\tupper = 0.6\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.9006474239999995 with absolute error < 0.00000000000001\n```\n\n\n:::\n:::\n\n\n\n\n\nThe two values are the same to like 15 digits of precision. So we really don't\nneed to go through all of that mess, we can just use numerical integration.\nAs you may have guessed, `R` has multiple easier ways to do this. First, the\nbeta density is already built into `R`, so we don't have to write out the\nentire thing.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(\n\tf = \\(p) dbeta(p, 4, 6),\n\tlower = 0,\n\tupper = 0.6\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.900647424 with absolute error < 0.00000000000001\n```\n\n\n:::\n:::\n\n\n\n\n\nAnd of course, `R` has a built-in, better way to get this probability than\nusing the standard numerical integrator. (And since the beta distribution\nis continuous, we don't even have to worry about the boundaries this time.)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbeta(0.6, 4, 6, lower.tail = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9006474239999999\n```\n\n\n:::\n:::\n\n\n\n\n\n## Q2\n\n::: {.callout-note appearance=\"simple\"}\n\nYou flip the coin 10 more times and now have 9 heads and 11 tails total. What is\nthe probability that the coin is fair, using our definition of fair, give or\ntake 5\\%?\n\n:::\n\nSo, we can either numerically integrate, which allows us to specify whatever\nbounds we want (since this integrand is pretty well-behaved for this kind\nof thing).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(\n\tf = \\(p) dbeta(p, 9, 11),\n\tlower = 0.45,\n\tupper = 0.55\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.3098800156513043 with absolute error < 0.0000000000000034\n```\n\n\n:::\n:::\n\n\n\n\n\nOr we can just subtract.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbeta(0.55, 9, 11) - pbeta(0.45, 9, 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3098800156513036\n```\n\n\n:::\n:::\n\n\n\n\n\nSometimes subtraction can be a problem with numerical computing, but if\nsubtraction will cause a problem, so will numerical integration, so this\nlatter method is what I would default to.\n\n## Q3\n\n::: {.callout-note appearance=\"simple\"}\n\nData is the best way to become more confident in your assertions. You flip\nthe coin 200 more times and end up with 109 heads and 111 tails. Now what is\nthe probability that the coin is fair, give or take 5\\%?\n\n:::\n\nAlright, I've already talked enough about how to solve these problems,\nthis is just another of the same thing. So let's just solve it.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbeta(0.55, 109, 111) - pbeta(0.45, 109, 111)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8589371426532764\n```\n\n\n:::\n:::\n\n\n\n\n\nThat's a pretty good chance, I think.\n\n\n<!-- end of file -->\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}