{
  "hash": "247958e30f5cafe8fdc71042090a683e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 4: Creating a Binomial Probability Distribution\"\nauthor: \"Zane Billings\"\ndate: \"2022-12-10\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\"scipen\" = 9999, \"digits\" = 4)\n```\n:::\n\n\n\n# Quick update on notes\n\nMy original intention was also to post all of the notes I took while reading\nthrough this book. But we're still in stuff that I felt pretty comfortable with\n(because I've had multiple classes that covered it), so no notes yet.\nOnce I get to sections that had new material for me I'll start posting them!\n\n# Solutions\n\n## Q1\n\n::: {.callout-note appearance=\"simple\"}\n\nWhat are the parameters of the binomial distribution for the probability of\nrolling either a 1 or a 20 on a 20-sided die, if we roll the die 12 times?\n\n:::\n\nThe parameters are $n = 12$ and $p = 2/20 = 1/10 = 0.1$.\n\n## Q2\n\n::: {.callout-note appearance=\"simple\"}\n\nThere are four aces in a deck of 52 cards. If you pull a card, return the card, then reshuffle, and pull a card again, how many ways can you pull just one ace in \nfive pulls?\n\n:::\n\nSince we're drawing with replacement, we are doing\n$5$ Bernoulli trials, each with a probability of $4 / 52 = 1 / 13$. So we can\nuse the Binomial distribution to get this probability. We can get that\n\n$$P(1 \\text{ ace in } 5 \\text{ pulls}) = B\\left( x = 1 \\mid n = 5, \\ p = \\frac{1}{13} \\right),$$\n\nwhich we would then calculate as\n\n$$P(1 \\text{ ace in } 5 \\text{ pulls}) = \\left( 5\\atop{1} \\right) \\left(\\frac{1}{13}\\right)^1\\left(\\frac{12}{13}\\right)^4.$$\n\nTo get the answer, we can certainly write out the entire formula in `R`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchoose(5, 1) * (1 / 13) ^ 1 * (12 / 13) ^ 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2792\n```\n\n\n:::\n:::\n\n\n\nBut here's a sneaky trick. Since `R` was designed for statistical computing,\na fast version of the binomial distribution is already built in.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(x = 1, size = 5, prob = 1 / 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2792\n```\n\n\n:::\n:::\n\n\n\n## Q3\n\n::: {.callout-note appearance=\"simple\"}\n\nFor the example in question 2, what is the probability of pulling 5 aces in\n10 pulls (remember the card is shuffled back in the deck when it is pulled)?\n\n:::\n\nThis time I'll just use the R calculation, since this problem is worked\nout exactly the same way. The probability we want to estimate is\n$$P(5 \\text{ aces in } 10 \\text{ pulls}) = B\\left( x = 5 \\mid n = 10, \\ p = \\frac{1}{13} \\right),$$\nwhich we can approximate in `R`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(x = 5, size = 10, prob = 1 / 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0004549\n```\n\n\n:::\n:::\n\n\n\nNote that this probability is quite small -- that is because both drawing this\nmany aces is difficult, and because this is the probability of drawing\nEXACTLY five aces.\n\n## Q4\n\n::: {.callout-note appearance=\"simple\"}\n\nWhen you're searching for a new job, it's always helpful to have more than one offer on the table so you can use it in negotiations. If you have a 1/5 probability\nof receiving a job offer when you interview, and you interview with seven\ncompanies in a month, what is the probability you'll have at least two\ncompeting offers by the end of that month.\n\n:::\n\nThis time we have to consider more than just one of these probabilities,\nbecause we want the probability of *at least two* offers. Let $O$ be the number\nof competing offers we receive. Then we can write\n$$P(O \\geq 2) = B\\left(O = 2 \\mid n = 7, p = \\frac{1}{5}\\right) + \\ldots + B\\left(O = 7 \\mid n = 7, p = \\frac{1}{5}\\right),$$\nwhich we could also write more compactly as\n$$P(O \\geq 2) = \\sum_{o = 2}^7 B\\left(O = o \\mid n = 7, p = \\frac{1}{5}\\right).$$\nSince `dbinom()` is vectorized, we can calculate this pretty easily in `R`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum( dbinom(x = 2:7, size = 7, prob = 1 / 5) )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4233\n```\n\n\n:::\n:::\n\n\n\nOf course, as you might have guessed, `R` has a shortcut for this: the `pbinom`\nfunction. This way is a little bit tricky though, because the way we have to\nspecify the probability we want is a little more complicated than we would hope.\n\nThe `lower.tail` parameter specifies whether we want the cumulative probability\nabove (`FALSE`) or below (`TRUE`) the argument(s) for the `q` parameter.\nFor above, the probability is $P(X > x)$, but for below, it is $P(X \\leq x)$.\nSince we have a positive probability at $P(X = x)$, we can't just throw in `2`\nas the boundary, it will not give the correct answer. Instead we can use this\nfunction to calculate\n$$P(X \\geq 2) = 1 - P(X < 2) = 1 - P(X \\leq 1) = P(X > 1).$$\nThis last two forms are the two that we can get with `pbinom`, as I'll calculate\nbelow.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# P(O > 1)\npbinom(q = 1, size = 7, prob =  1 / 5, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4233\n```\n\n\n:::\n\n```{.r .cell-code}\n# 1 - P(O <= 1)\n1 - pbinom(q = 1, size = 7, prob = 1 / 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4233\n```\n\n\n:::\n:::\n\n\n\nOf course all three of these solutions are equivalent, so no matter which way\nwe do it, we get a probability of about $42\\%$.\n\n## Q5\n\n::: {.callout-note appearance=\"simple\"}\n\nYou get a bunch of recruiter emails and find out you have 25 interviews lined up\nin the next month. Unfortunately, you know that this will leave you exhausted,\nand the probability of getting an offer will drop to 1/10 if you're tired.\nYou really don't want to go on this many interviews unless you are at least\ntwice as likely to get at least two competing offers. Are you more likely to\nget at least two offers if you go for 25 interviews, or stick to just 7?\n\n:::\n\nSo, what we actually want to calculate is the ratio\n$$\\frac{P\\left( O \\geq 2 \\mid n =  7, \\ p = \\frac{1}{ 5} \\right)}\n       {P\\left( O \\geq 2 \\mid n = 25, \\ p = \\frac{1}{10} \\right)}.$$\nIn the previous problem, we calculated the numerator, so now we need to\ncalculate the denominator. Fortunately, we can do this the same way, using the\nsame practical considerations we did less time. Just to make this issue about\nthe boundary more clear, I'll write out the `R` code for doing it all three\nways.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dbinom(2:25, size = 25, prob = 1 / 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7288\n```\n\n\n:::\n\n```{.r .cell-code}\npbinom(q = 1, size = 25, prob = 1 / 10, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7288\n```\n\n\n:::\n\n```{.r .cell-code}\n1 - pbinom(q = 1, size = 25, prob = 1 / 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7288\n```\n\n\n:::\n:::\n\n\n\nWe can then approximate the ratio we are interested in as\n$$\\frac{42\\%}{73\\%} \\approx 0.58 > 0.50,$$\nand I just realized that it probably makes more sense to invert this ratio. So\nlet's do that:\n$$\\frac{73\\%}{42\\%} \\approx 1.74 < 2,$$\nso we will improve our chances of getting at least two competing offers,\nbut we will not be at least twice as likely, so we want to stick with just\n$7$ interviews instead of $25$.\n:::\n\n<!-- end of file -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}